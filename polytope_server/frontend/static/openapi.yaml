##
## Copyright 2022 European Centre for Medium-Range Weather Forecasts (ECMWF)
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## In applying this licence, ECMWF does not waive the privileges and immunities
## granted to it by virtue of its status as an intergovernmental organisation nor
## does it submit to any jurisdiction.
##


openapi: 3.0.3
info:
  description: REST API for ECMWF data retrieval
  title: Polytope Server API
  version: "1.1.0"
  contact:
    name: ECMWF
    email: software.support@ecmwf.int
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: /api/v1
    description: API v1

components:
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
    bearerAuth:
      scheme: bearer
      type: http
      bearerFormat: JWT
    ecmwfKey:
      description: Enter your ECMWF credentials as **EmailKey &lt;email&gt;&#58;&lt;apikey&gt;**
      in: header
      name: Authorization
      type: apiKey

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message

    collections:
      type: array
      items:
        type: string
        enum:
          - collection1

    request:
      type: object
      properties:
        coerced_request:
          type: object
          description: The coerced request object, which is a dictionary of the request parameters.
        collection:
          type: string
          example: collection1
        content_length:
          type: string
          example: "0"
        id:
          type: string
          example: "1"
        log:
          type: string
          example: an error message
        md5:
          type: string
        status:
          type: string
          example: queued
        timestamp:
          type: string
          example: "123"
        url:
          type: string
          example: http://localhost:32003/123
        user_request:
          type: string
        username:
          type: string
          example: admin
        verb:
          type: string
          example: retrieve

    response:
      type: object
      properties:
        contentLength:
          type: integer
        contenttype:
          type: string
        location:
          type: string
        log:
          type: string
        status:
          type: string
        verb:
          type: string

  responses:
    BadRequest:
      description: Bad request - invalid parameters or request format
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Missing authorization token or Key unrecognized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Forbidden:
      description: Not authorized to access this resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:
  /api/v1/auth/keys:
    post:
      tags: [Authentication]
      description: Post user details to receive a key
      summary: Generate API key
      security:
        - basicAuth: []
      responses:
        '200':
          description: Key with expiry date
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                  expires:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/v1/collections:
    get:
      tags: [Collections]
      description: Get collections
      summary: List available collections
      responses:
        '200':
          description: List of collections
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/collections'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/v1/downloads/{request_id}:
    get:
      tags: [Downloads]
      description: Download data for a completed request
      summary: Download request data
      parameters:
        - name: request_id
          in: path
          required: true
          description: The id of the request to download
          schema:
            type: string
      responses:
        '200':
          description: data
          content:
            application/x-grib:
              schema:
                type: string
                format: binary
            application/netcdf:
              schema:
                type: string
                format: binary
            application/prs.coverage+json:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/v1/requests:
    get:
      tags: [Requests]
      description: Get user requests
      summary: List user requests
      responses:
        '200':
          description: List of requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/v1/requests/{collection_or_request_id}:
    get:
      tags: [Requests]
      description: Get specific request or list of requests on collection
      summary: Get request status or collection requests
      parameters:
        - name: collection_or_request_id
          in: path
          required: true
          description: The id of the request to retrieve
          schema:
            type: string
      responses:
        '200':
          description: List of collection requests OR data (click Media type for more information)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    items:
                      $ref: '#/components/schemas/request'
            application/x-grib:
              schema:
                type: string
                format: binary
                example: Binary ECMWF data
        '202':
          description: Specific request
          headers:
            content-length:
              schema:
                type: string
                example: "10"
            content-type:
              schema:
                type: string
                example: application/json
            location:
              schema:
                type: string
                example: http://127.0.0.1:32002/api/requests/123
            retry-after:
              schema:
                type: string
                example: "5"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Request queued
                  status:
                    type: string
                    example: queued
        '303':
          description: redirects
          headers:
            location:
              description: URI where the client can refresh the expired token.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags: [Requests]
      description: Submit a data retrieval request to a collection
      summary: Submit data request
      parameters:
        - name: collection_or_request_id
          in: path
          required: true
          description: The collection to post the request to
          schema:
            type: string
            example: collection1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - verb
                - request
              properties:
                verb:
                  type: string
                  example: retrieve
                request:
                  type: string
                  example:
                    class: od
                    date: '20200101'
                    expver: '1'
                    levelist: '500'
                    levtype: pl
                    param: t
                    step: '0'
                    stream: oper
                    time: '00'
                    type: fc
      responses:
        '202':
          description: Message and status of submitted request
          headers:
            content-length:
              schema:
                type: string
                example: "10"
            content-type:
              schema:
                type: string
                example: application/json
            location:
              schema:
                type: string
                example: http://127.0.0.1:32002/api/requests/123
            retry-after:
              schema:
                type: string
                example: "5"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Request queued
                  status:
                    type: string
                    example: queued
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    delete:
      tags: [Requests]
      description: Revoke a specific unprocessed request or all unprocessed requests
      summary: Revoke requests
      parameters:
        - name: collection_or_request_id
          in: path
          required: true
          description: The id of the request to delete
          schema:
            type: string
      responses:
        '200':
          description: Revoke unprocessed request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully deleted request
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        

  /api/v1/test:
    get:
      tags: [Health]
      description: Test if the server is alive
      summary: Health check
      security: []
      responses:
        '200':
          description: String saying server is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Polytope server is alive

  /api/v1/user:
    get:
      tags: [User]
      description: Get user information
      summary: Get current user info
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  live requests:
                    type: string
                    example: "1"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

security:
  - bearerAuth: []
  - basicAuth: []
  - ecmwfKey: []

tags:
  - name: Authentication
    description: API key generation and authentication
  - name: Collections
    description: Available data collections
  - name: Downloads
    description: Download processed data
  - name: Requests
    description: Data retrieval requests management
  - name: User
    description: User information and limits
  - name: Health
    description: Server health and status checks
